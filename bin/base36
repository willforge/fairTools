#!/usr/bin/perl

#--------------------------------
# -- Options parsing ...
#
my $noh = 0;
my $decode = 0;
my $verbose = 0;
while (@ARGV && $ARGV[0] =~ m/^-/)
{
  $_ = shift;
  #/^-(l|r|i|s)(\d+)/ && (eval "\$$1 = \$2", next);
  if (/^-v(?:erbose)?/) { $verbose= 1; }
  elsif (/^-d(?:ec)?/) { $decode= 1; }
  elsif (/^-(?:qm?|no?h)/) { $noh= 1; }
  elsif (/^-k(?:mu?)/) { $kmu= 1; }
  elsif (/^-k(?:2k?)/) { $k2= 1; }
  else                  { die "Unrecognized switch: $_\n"; }

}

local $/ = undef;
my $buf = <>;
$buf = decode_mbase($buf) if ($decode);
printf "buf: f%s\n",unpack'H*',$buf if ($verbose|$dbug);
if ($noh || $kmu) {
   $buf = substr($buf,2) if (substr($buf,0,1) eq "\x01");
   printf "K%s\n",&encode_base36($buf);
} elsif ($k2) {
   $buf = "\x01\x72".$buf;
   printf "k%s\n",lc &encode_base36($buf);
} else {
   printf "k%s\n",lc &encode_base36($buf);
}
printf "b16: f%s\n",unpack'H*',$buf if $verbose;

exit $?;


sub decode_mbase {
  my $qm = shift;
  local $/ = "\n"; chomp $qm;
  my $bin;
  if ($qm =~ m/^z/) {
    $bin = &decode_base58(substr($qm,1));
  } elsif ($qm =~ m/^b/i) {
    $bin = &decode_base32(lc substr($qm,1));
  } elsif ($qm =~ m/^k/i) {
    $bin = &decode_base36(lc substr($qm,1));
  } elsif ($qm =~ m/^f/) {
    $bin = pack'H*',substr($qm,1);
  } else {
    $bin = &decode_base58($qm);
  }
  return $bin;
}


sub decode_base58 {
  use Math::BigInt;
  use Encode::Base58::BigInt qw();
  my $s = $_[0];
  # $e58 =~ tr/a-km-zA-HJ-NP-Z/A-HJ-NP-Za-km-z/;
  $s =~ tr/A-HJ-NP-Za-km-zIO0l/a-km-zA-HJ-NP-ZiooL/;
  my $bint = Encode::Base58::BigInt::decode_base58($s);
  my $bin = Math::BigInt->new($bint)->as_bytes();
  return $bin;
}

sub decode_base36 {
  use Math::BigInt;
  use Math::Base36 qw();
  #$k36 = uc($_[0])
  #$k36 =~ y,A-Z0-9,0-9A-Z;
  my $n = Math::Base36::decode_base36($_[0]);
  my $bin = Math::BigInt->new($n)->as_bytes();
  return $bin;
}

sub decode_base32 {
  use MIME::Base32 qw();
  my $bin = MIME::Base32::decode($_[0]);
  return $bin;
}

sub encode_base36 {
  use Math::BigInt;
  use Math::Base36 qw();
  my $n = Math::BigInt->from_bytes(shift);
  my $k36 = Math::Base36::encode_base36($n,@_);
  #$k36 =~ y,0-9A-Z,A-Z0-9,;
  return $k36;
}

1;
