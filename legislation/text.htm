---
lang: fr
---
<!-- __LINE__ = 3 -->
<!DOCTYPE html>
<head>
<meta charset="utf8"/>
<script src=../js/sha256.js></script>
<script src=../js/essential.js></script>
<script src=../js/ipfs.js></script>
</head>
{% assign dict = site.data.translate[page.lang] %}

<span>{{dict.pick_a_path}}</span>

<br>
<select name=share>
<br>{{dict.path}}: <option value=my>my</option>
<option value=public>public</option>
</select>
<select name=folder>
<option value=submissions>{{dict.submissions}}</option>
<option value=draft>{{dict.draft}}</option>
</select>
<select name=group>
<option value=complaints>{{dict.complaints}}</option>
<option value=preamble>{{dict.preamble}}</option>
<option value=constitution>{{dict.constitution}}</option>
<option value=laws>{{dict.laws}}</option>
</select>
<br>{{dict.author}}: <input name=author placeholder="{{dict.author}}">
<br>{{dict.date}}: <input type=date name=date value='' placeholder="{{dict.date}}">
<br>{{dict.peerid}}: <input name=peerid placeholder="{{dict.peerid}}" size=39 disabled>
<hr>
<br>{{dict.title}}: <input type=text name=title placeholder="{{dict.title}}">
<br>{{dict.topic}}: <input type=text name=topic placeholder="{{dict.topic}}">
<div id=complaint>
<textarea name=complaint></textarea>
<br><span id=signature></span>
<br><span id=qm></span>
</div>

<div id=preamble style="display:none">
<textarea name=preamble></textarea>
</div>

<div id=constitution style="display:none">
<textarea name=constitution></textarea>
</div>

<div id=law style="display:none">
<textarea name=law></textarea>
</div>
<button type=submit onclick="submit(event)">{{dict.submit}}</button> &amp;
<button type=notify onclick="notify(event)">{{dict.notify}}</button>
<hr style="left-margin: 0; width:50%;">
<span id=uniq_content></span>
<br><span id=token></span>


<script>
const gwport = 8080;
const tics = getTic();
const today = Math.floor(tics / 60 / 29); // changes every 29 min ! // get_date();
const sharedsecret = '123-secret-de-polichinelle;'; // to be fetched from keybase or end-to-end encrypted system
const PUBLICID = 'QmezgbyqFCEybpSxCtGNxfRD9uDxC53aNv5PfhB3fGUhJZ';
var peerid; // sender

main();
async function main () {
peerid = await Promise.resolve(promisedPeerId);
document.getElementsByName('peerid')[0].value = peerid;
 for (e of document.getElementsByClassName('peerid')) {
   e.innerHTML = peerid;
 }

}

async function submit(ev) {
let [callee, caller] = functionNameJS();
// write to specified path 
let s = document.getElementsByName('share')[0].value; 
let f = document.getElementsByName('folder')[0].value; 
let g = document.getElementsByName('group')[0].value; 
let title = document.getElementsByName('title')[0].value;
let titlep = title.replace(' ','-');

let author = document.getElementsByName('author')[0].value; 
let topic = document.getElementsByName('topic')[0].value;
let topicp = topic.replace(':','%3A').replace(' ','+');
let topicf = topic.toLowerCase().replace(/[^a-z0-9]+/g,'-');
console.debug(callee+'.topicf:',topicf);

let date = document.getElementsByName('date')[0].value; 
let path = `/${s}/${f}/${g}/${titlep}`;

let uri = `uri:anonymous:text:${topicp}`;
let textid = getNid(uri);
//let path = '/'+s+'/'+f+'/'+g+'/'+t;
let logfile = `${path}/${topicf}_history-${textid}.log`;
console.debug(callee+'.logfile:',logfile);

let text = document.getElementsByName('complaint')[0].value;
let payload = await ipfsAddTextContent(text);

let qm = await ipfsLogAppend(logfile,`${tics}: ${payload} by ${author}`);
document.getElementById('qm').innerHTML = `<a href=http://localhost:${gwport}/${qm}>/ipfs/${qm}</a>`;
console.debug(callee+'.qm:',qm);

// publish ...
let ppath;
if (path.match('/public/')) {
  ppath = await ipfsPublish(path.replace('/public/','/public/./'));
} else {
  ppath = await ipfsPublish(logfile);
}
console.debug(callee+'.ppath:',ppath);
}

async function notify(ev) {
// 1.
let editor_token = `I have submitted a proposal to ${PUBLICID}`;
let hash = await ipfsAddTextContent(editor_token);
    document.getElementById('token').innerHTML = `editor <span title=${hash}">token:${hash}</span>`;
// 2.
// mboxid: `urn:message:to:${PUBLICID}:from:${peerid}`
let mboxid = getNid('urn:message:to:'+PUBLICID+':from:'+peerid);
let uniq_message = `proposition soumise au public on ${today}, this message is intended for peerid ${PUBLICID}`;
let uniq_content = getNid(sharedsecret + uniq_message);
    hash = await ipfsAddTextContent(uniq_content);
    document.getElementById('uniq_content').innerHTML = `uniq: <span title=${hash}>${uniq_content}</span>`; // TODO: make token non-downloadable
// 3. 
let signature_token = `I have signed my text with my peerid: ${peerid}`;
    hash = await ipfsAddTextContent(signature_token);
    document.getElementById('signature').innerHTML = `signed by <a title=${hash} href=https://gateway.ipfs.io/ipns/${peerid}>${peerid}</a>`;

  
  
}

</script>
